{"version":3,"file":"static/js/891.a3aa9533.chunk.js","mappings":"+RAGaA,EAAUC,EAAAA,EAAAA,KAAH,yOAcPC,EAAiBD,EAAAA,EAAAA,OAAH,gpBAoCdE,EAAeF,EAAAA,EAAAA,MAAH,wNAKrBG,EAAAA,EAAAA,OAGAA,EAAAA,EAAAA,OAGAA,EAAAA,EAAAA,SAKSC,EAAeJ,EAAAA,EAAAA,MAAH,0aAmBrBG,EAAAA,EAAAA,OAGAA,EAAAA,EAAAA,O,+GC3FSE,EAAiB,SAAAC,GAC5B,OAAOA,EAAMC,SAASC,KACvB,EAEYC,EAAkB,SAAAH,GAC7B,OAAOA,EAAMC,SAASG,SACvB,EAEYC,EAAc,SAAAL,GACzB,OAAOA,EAAMC,SAASK,KACvB,EAEYC,EAAe,SAAAP,GAC1B,OAAOA,EAAMQ,OAAOA,MACrB,E,UCKGC,EAAS,WAGX,IAH0B,IAAdC,EAAc,uDAAP,GACfC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAC3CA,KAAQ,CACb,IAAIM,EAAqB,GAAdJ,EAAMF,GAEfC,GADEK,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOL,CACR,E,mBCuED,I,YAAA,EA5FA,WACE,OAA4BQ,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwBF,EAAAA,EAAAA,UAAS,IAAjC,eAAOG,EAAP,KAAaC,EAAb,KAEMC,GAAWC,EAAAA,EAAAA,MACXxB,GAAWyB,EAAAA,EAAAA,IAAYC,GAEvBC,EAAe,SAAC,GAAiC,IAAD,IAA9BC,OAAUP,EAAoB,EAApBA,KAAMQ,EAAc,EAAdA,MACtC,OAAQR,GACN,IAAK,OACHC,EAAQO,GACR,MAEF,IAAK,SACHT,EAAUS,GACV,MAEF,QACE,OAEL,EASKC,EAAY,WAChBV,EAAU,IACVE,EAAQ,GACT,EAEKS,EAAa,SAACV,EAAMW,GACxB,IAAMC,EAAcZ,EAAKa,OACnBC,EAAeH,EAAME,OAG3B,GAFoBlC,EAASoC,MAAK,SAAAC,GAAO,OAAIA,EAAQhB,OAASY,CAArB,IAGvCK,MAAM,2CACD,CACL,IAAMP,EAAa,CACjBV,KAAMY,EACNd,OAAQgB,EACRzB,GAAIF,KAGNe,GAASgB,EAAAA,EAAAA,IAAWR,GACrB,CACF,EAOD,OACE,+BACE,UAAC,KAAD,CAASS,SArCQ,SAAAC,GACnBA,EAAEC,iBAEFX,EAAWV,EAAMF,GACjBW,GACD,EAgCG,WACE,UAAC,KAAD,yBAEE,SAAC,KAAD,CACEa,KAAK,OACLtB,KAAK,OACLuB,QAAQ,yHACRC,MAAM,yIACNhB,MAAOR,EACPyB,SAAUnB,EACVoB,UAAQ,QAIZ,UAAC,KAAD,2BAEE,SAAC,KAAD,CACEJ,KAAK,MACLtB,KAAK,SACLuB,QAAQ,yFACRC,MAAM,+FACNhB,MAAOV,EACP2B,SAAUnB,EACVoB,UAAQ,QAIZ,SAAC,KAAD,CAAgBJ,KAAK,SAASK,SAlCrB,KAAT3B,GAA0B,KAAXF,EAkCf,gCAIP,E,mBCtGY8B,EAAQxD,EAAAA,EAAAA,GAAH,sFCCH,SAASyD,EAAT,GAA0B,IAATL,EAAQ,EAARA,MAC9B,OAAO,SAACI,EAAD,UAAQJ,GAChB,CCHM,IAAMM,EAAc1D,EAAAA,EAAAA,IAAH,sNAaX2D,EAAc3D,EAAAA,EAAAA,IAAH,qGAMX4D,EAAY5D,EAAAA,EAAAA,OAAH,iWAiBT6D,EAAc7D,EAAAA,EAAAA,KAAH,kFAMX8D,EAAgB9D,EAAAA,EAAAA,KAAH,8DCN1B,MA1BA,YAAqC,IAAbO,EAAY,EAAZA,SAChBuB,GAAWC,EAAAA,EAAAA,MAMjB,OAAOxB,EAASwD,KAAI,YAA2B,IAAxBnC,EAAuB,EAAvBA,KAAMX,EAAiB,EAAjBA,GAAIS,EAAa,EAAbA,OAC/B,OACE,SAACgC,EAAD,WACE,UAACC,EAAD,YACE,UAACE,EAAD,WAAcjC,EAAd,QACA,SAACkC,EAAD,UAAgBpC,KAChB,SAACkC,EAAD,CACEV,KAAK,YACLc,QAAS,YAZC,SAAA/C,GAClBa,GAASmC,EAAAA,EAAAA,IAAchD,GACxB,CAWWiD,CAAYjD,EACb,EAJH,sBAHgBA,IAcvB,GACF,E,UCCD,MAhCA,WACE,IAAMV,GAAWyB,EAAAA,EAAAA,IAAYC,GACvBnB,GAASkB,EAAAA,EAAAA,IAAYC,GAErBH,GAAWC,EAAAA,EAAAA,MAMjB,OACE,8BACGxB,EAAS4D,OAAS,IACjB,SAAC,KAAD,CAASC,OAAO,GAAhB,UACE,UAAC,KAAD,uCAEE,SAAC,KAAD,CACElB,KAAK,OACLtB,KAAK,SACLuB,QAAQ,yHACRC,MAAM,yIACNhB,MAAOtB,EACPuC,SAhBS,SAAAgB,GACnBvC,GAASwC,EAAAA,EAAAA,GAAmBD,EAAMlC,OAAOC,OAC1C,EAeWkB,UAAQ,UAOrB,ECkBD,I,EAAA,EA5CA,WACE,IAAM/C,GAAWyB,EAAAA,EAAAA,IAAYC,GACvBnB,GAASkB,EAAAA,EAAAA,IAAYC,GACrBrB,GAAQoB,EAAAA,EAAAA,IAAYC,GACpBvB,GAAYsB,EAAAA,EAAAA,IAAYC,GAExBH,GAAWC,EAAAA,EAAAA,OAEjBwC,EAAAA,EAAAA,YAAU,WACRzC,GAAS0C,EAAAA,EAAAA,MACV,GAAE,CAAC1C,IAEJ,IAAM2C,EAAuB,WAC3B,OAAOlE,EAASO,QAAO,SAAA8B,GAAO,OAC5BA,EAAQhB,KAAK8C,cAAcC,SAAS7D,EAAO4D,cADf,GAG/B,EAED,OACE,gCACGhE,IAAa,SAAC,EAAD,CAAO0C,MAAO,YAEP,IAApB7C,EAAS4D,SAAiBvD,IAAUF,IACnC,SAAC,EAAD,CAAO0C,MAAM,0BAEM,IAApB7C,EAAS4D,SAAgB,SAAC,EAAD,IAEL,IAApB5D,EAAS4D,QAA2B,KAAXrD,IACxB,SAAC,EAAD,CAAcP,SAAUA,IAGd,KAAXO,GAAmD,IAAlC2D,IAAuBN,SACvC,SAAC,EAAD,CAAc5D,SAAUkE,MAGd,KAAX3D,GAAmD,IAAlC2D,IAAuBN,SACvC,SAAC,EAAD,CAAOf,MAAM,eAGdxC,IAAS,SAAC,EAAD,CAAOwC,MAAOxC,MAG7B,EClDY4C,EAAQxD,EAAAA,EAAAA,GAAH,sFCOH,SAAS4E,IACtB,IAAM9C,GAAWC,EAAAA,EAAAA,MACXrB,GAAYsB,EAAAA,EAAAA,IAAYvB,GAM9B,OAJA8D,EAAAA,EAAAA,YAAU,WACRzC,GAAS0C,EAAAA,EAAAA,MACV,GAAE,CAAC1C,KAGF,iCACE,SAAC+C,EAAA,EAAD,WACE,6CAEF,8BAAGnE,GAAa,4BAEhB,iCACE,SAAC,EAAD,yBACA,mBACA,SAAC,EAAD,KACA,mBACA,SAAC,EAAD,SAIP,C","sources":["components/Forms/Forms.styled.jsx","redux/selectors.js","../node_modules/nanoid/index.browser.js","components/Forms/ContactForm.jsx","components/Title/Title.styled.jsx","components/Title/Title.jsx","components/ContactsList/ContactsList.styled.jsx","components/ContactsList/ContactsList.jsx","components/Forms/FilterForm.jsx","components/Contacts/Contacts.jsx","pages/Phonebook/Phonebook.styled.jsx","pages/Phonebook/Phonebook.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport queries from '../../utils/mediaQueries';\n\nexport const FormCss = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  color: white;\n\n  overflow: hidden;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 12px;\n`;\n\nexport const RegisterBtnCss = styled.button`\n  display: inline-block;\n  padding: 10px 8px;\n  border: 0;\n  border-radius: 15px;\n  min-width: 120px;\n\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  cursor: pointer;\n  outline: none;\n  background-color: #f87719;\n  color: white;\n\n  &:disabled {\n    opacity: 0.5;\n    cursor: default;\n\n    background-color: #444444;\n  }\n\n  &:enabled {\n    opacity: 1;\n  }\n\n  &:not(:disabled):hover {\n    background-color: orangered;\n    transform: scale(1.1);\n  }\n`;\n\nexport const FormLabelCss = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 12px;\n  ${queries.mobile} {\n    width: 479px;\n  }\n  ${queries.tablet} {\n    width: 768px;\n  }\n  ${queries.desktop} {\n    width: 1024px;\n  }\n`;\n\nexport const FormInputCss = styled.input`\n  color: white;\n  background-color: inherit;\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: #f87719 1px solid;\n  border-radius: 15px;\n  outline: none;\n  padding: 8px 10px;\n  margin-top: 8px;\n\n  &::placeholder {\n    font: inherit;\n    font-size: 18px;\n    text-align: center;\n  }\n\n  ${queries.mobile} {\n    width: 480px;\n  }\n  ${queries.tablet} {\n    width: 570px;\n  }\n`;\n","export const selectContacts = state => {\n  return state.contacts.items;\n};\n\nexport const selectIsLoading = state => {\n  return state.contacts.isLoading;\n};\n\nexport const selectError = state => {\n  return state.contacts.error;\n};\n\nexport const selectFilter = state => {\n  return state.filter.filter;\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/operations';\nimport * as selectors from '../../redux/selectors';\n\nimport {\n  FormCss,\n  RegisterBtnCss,\n  FormLabelCss,\n  FormInputCss,\n} from './Forms.styled';\n\nfunction ContactForm() {\n  const [number, setNumber] = useState('');\n  const [name, setName] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectors.selectContacts);\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    newContact(name, number);\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setNumber('');\n    setName('');\n  };\n\n  const newContact = (name, phone) => {\n    const trimmedName = name.trim();\n    const trimmedPhone = phone.trim();\n    const isDuplicate = contacts.some(contact => contact.name === trimmedName);\n\n    if (isDuplicate) {\n      alert('This contact is already in contacts');\n    } else {\n      const newContact = {\n        name: trimmedName,\n        number: trimmedPhone,\n        id: nanoid(),\n      };\n\n      dispatch(addContact(newContact));\n    }\n  };\nconst chekButtonActive = () => {\n    if (name === '' || number === '') {\n      return true;\n    }\n    return false;\n  };\n  return (\n    <>\n      <FormCss onSubmit={handleSubmit}>\n        <FormLabelCss>\n          Enter name\n          <FormInputCss\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            value={name}\n            onChange={handleChange}\n            required\n          />\n        </FormLabelCss>\n\n        <FormLabelCss>\n          Enter number\n          <FormInputCss\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            value={number}\n            onChange={handleChange}\n            required\n          />\n        </FormLabelCss>\n\n        <RegisterBtnCss type=\"submit\" disabled={chekButtonActive()}>Add to contact</RegisterBtnCss>\n      </FormCss>\n    </>\n  );\n}\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const Title = styled.h2`\n  display: flex;\n  justify-content: center;\n  color: #fff;\n`;","import React from 'react'\nimport { Title } from './Title.styled';\n\nexport default function Tiltle({title}) {\n  return <Title>{title}</Title>;\n}\n","import styled from '@emotion/styled';\n\nexport const ContactList = styled.div`\n  width: 480px;\n  border: tomato 1px solid;\n  padding: 32px;\n  border-radius: 15px;\n  margin-left: auto;\n  margin-right: auto;\n\n  &:not(:last-child) {\n    margin-bottom: 13px;\n  }\n`;\n\nexport const ContactItem = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const DeleteBtn = styled.button`\n  display: block;\n  width: 120px;\n  height: 32px;\n\n  border: 1px solid black;\n  background: linear-gradient(141.22deg, #ffc226 20%, #f84119 80%);\n  border-radius: 74px;\n  color: #111111;\n  cursor: pointer;\n\n  &:hover {\n    background: linear-gradient(141.22deg, #cb4e13 9.4%, #dcb311 91.91%);\n    color: white;\n  }\n`;\n\nexport const ContactName = styled.span`\n  color: white;\n  font-weight: 500;\n  font-size: 18px;\n`;\n\nexport const ContactNumber = styled.span`\n  color: white;\n  margin-left: 8px;\n`;\n","import React from 'react';\nimport { deleteContact } from '../../redux/operations';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  ContactList,\n  ContactItem,\n  DeleteBtn,\n  ContactName,\n  ContactNumber,\n} from './ContactsList.styled';\n\nfunction ContactsList({ contacts }) {\n  const dispatch = useDispatch();\n\n  const handleClick = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return contacts.map(({ name, id, number }) => {\n    return (\n      <ContactList>\n        <ContactItem key={id}>\n          <ContactName>{name}:</ContactName>\n          <ContactNumber>{number}</ContactNumber>\n          <DeleteBtn\n            type=\"DeleteBtn\"\n            onClick={() => {\n              handleClick(id);\n            }}\n          >\n            delete\n          </DeleteBtn>\n        </ContactItem>\n      </ContactList>\n    );\n  });\n}\nexport default ContactsList;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { handleFilterChange } from '../../redux/slicers/filterSlicer';\n\nimport * as selectors from '../../redux/selectors';\n\nimport { FormCss, FormLabelCss, FormInputCss } from './Forms.styled';\nfunction Filter() {\n  const contacts = useSelector(selectors.selectContacts);\n  const filter = useSelector(selectors.selectFilter);\n\n  const dispatch = useDispatch();\n\n  const handleFilter = event => {\n    dispatch(handleFilterChange(event.target.value));\n  };\n\n  return (\n    <>\n      {contacts.length > 0 && (\n        <FormCss action=\"\">\n          <FormLabelCss>\n            Enter name from contacts\n            <FormInputCss\n              type=\"text\"\n              name=\"filter\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              value={filter}\n              onChange={handleFilter}\n              required\n            />\n          </FormLabelCss>\n        </FormCss>\n      )}\n    </>\n  );\n}\n\nexport default Filter;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport Title from '../Title/Title';\nimport ContactsList from '../ContactsList/ContactsList';\nimport Filter from '../Forms/FilterForm';\n\nimport * as selectors from '../../redux/selectors';\nimport { fetchContacts } from '../../redux/operations';\n\nfunction Contacts() {\n  const contacts = useSelector(selectors.selectContacts);\n  const filter = useSelector(selectors.selectFilter);\n  const error = useSelector(selectors.selectError);\n  const isLoading = useSelector(selectors.selectIsLoading);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const makeFilteredContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  return (\n    <>\n      {isLoading && <Title title={'Loading'} />}\n\n      {contacts.length === 0 && !error && !isLoading && (\n        <Title title=\"U haven't any friends\" />\n      )}\n      {contacts.length !== 0 && <Filter />}\n\n      {contacts.length !== 0 && filter === '' && (\n        <ContactsList contacts={contacts} />\n      )}\n\n      {filter !== '' && makeFilteredContacts().length !== 0 && (\n        <ContactsList contacts={makeFilteredContacts()} />\n      )}\n\n      {filter !== '' && makeFilteredContacts().length === 0 && (\n        <Title title=\"No matches\" />\n      )}\n\n      {error && <Title title={error} />}\n    </>\n  );\n}\n\nexport default Contacts;\n","import  styled  from '@emotion/styled';\n\nexport const Title = styled.h1`\n  color: #fff;\n  display: flex;\n  justify-content: center;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { fetchContacts } from 'redux/operations';\nimport { selectIsLoading } from 'redux/selectors';\nimport ContactForm from 'components/Forms/ContactForm';\nimport Contacts from 'components/Contacts/Contacts';\nimport { Title } from './Phonebook.styled';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your tasks</title>\n      </Helmet>\n      <>{isLoading && 'Request in progress...'}</>\n\n      <>\n        <Title>Phonebook</Title>\n        <br />\n        <ContactForm />\n        <br />\n        <Contacts />\n      </>\n    </>\n  );\n}\n"],"names":["FormCss","styled","RegisterBtnCss","FormLabelCss","queries","FormInputCss","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","useState","number","setNumber","name","setName","dispatch","useDispatch","useSelector","selectors","handleChange","target","value","resetForm","newContact","phone","trimmedName","trim","trimmedPhone","some","contact","alert","addContact","onSubmit","e","preventDefault","type","pattern","title","onChange","required","disabled","Title","Tiltle","ContactList","ContactItem","DeleteBtn","ContactName","ContactNumber","map","onClick","deleteContact","handleClick","length","action","event","handleFilterChange","useEffect","fetchContacts","makeFilteredContacts","toLowerCase","includes","Tasks","Helmet"],"sourceRoot":""}