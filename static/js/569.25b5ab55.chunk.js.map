{"version":3,"file":"static/js/569.25b5ab55.chunk.js","mappings":"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","sources":["redux/selectors.js","../node_modules/nanoid/index.browser.js","components/ContactForm.jsx","components/Title.jsx","components/ContactsList.jsx","components/Filter.jsx","components/Contacts.jsx","pages/Phonebook.jsx"],"sourcesContent":["export const selectContacts = state => {\n  return state.contacts.items;\n};\n\nexport const selectIsLoading = state => {\n  return state.contacts.isLoading;\n};\n\nexport const selectError = state => {\n  return state.contacts.error;\n};\n\nexport const selectFilter = state => {\n  return state.filter.filter;\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../redux/operations';\nimport * as selectors from '../redux/selectors';\n\nfunction ContactForm() {\n  const [number, setNumber] = useState('');\n  const [name, setName] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectors.selectContacts);\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    newContact(name, number);\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setNumber('');\n    setName('');\n  };\n\n  const newContact = (name, phone) => {\n    const trimmedName = name.trim();\n    const trimmedPhone = phone.trim();\n    const isDuplicate = contacts.some(contact => contact.name === trimmedName);\n\n    if (isDuplicate) {\n      alert('This contact is already in contacts');\n    } else {\n      const newContact = {\n        name: trimmedName,\n        number: trimmedPhone,\n        id: nanoid(),\n      };\n\n      dispatch(addContact(newContact));\n    }\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <label>\n          Enter name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            value={name}\n            onChange={handleChange}\n            required\n          />\n        </label>\n        <br />\n\n        <label>\n          Enter number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            value={number}\n            onChange={handleChange}\n            required\n          />\n        </label>\n        <br />\n\n        <button type=\"submit\">Add to contact</button>\n      </form>\n    </>\n  );\n}\n\nexport default ContactForm;\n","import React from 'react'\n\nexport default function Tiltle({title}) {\n  return <h2>{title}</h2>;\n}\n","import React from 'react';\nimport { deleteContact } from '../redux/operations';\nimport { useDispatch } from 'react-redux';\n\nfunction ContactsList({ contacts }) {\n  const dispatch = useDispatch();\n\n  const handleClick = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return contacts.map(({ name, id, number }) => {\n    return (\n      <li key={id}>\n        <span>\n          {name}: {number}\n        </span>\n        <button\n          type=\"button\"\n          onClick={() => {\n            handleClick(id);\n          }}\n        >\n          delete\n        </button>\n      </li>\n    );\n  });\n}\nexport default ContactsList;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { handleFilterChange } from '../redux/slicers/filterSlicer';\n\nimport * as selectors from '../redux/selectors';\n\nfunction Filter() {\n  const contacts = useSelector(selectors.selectContacts);\n  const filter = useSelector(selectors.selectFilter);\n\n  const dispatch = useDispatch();\n\n  const handleFilter = event => {\n    dispatch(handleFilterChange(event.target.value));\n  };\n\n  return (\n    <>\n      {contacts.length > 0 && (\n        <label>\n          Enter name from contacts\n          <input\n            type=\"text\"\n            name=\"filter\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            value={filter}\n            onChange={handleFilter}\n            required\n          />\n        </label>\n      )}\n    </>\n  );\n}\n\nexport default Filter;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport Title from './Title';\nimport ContactsList from './ContactsList';\nimport Filter from './Filter';\n\nimport * as selectors from '../redux/selectors';\nimport { fetchContacts } from '../redux/operations';\n\nfunction Contacts() {\n  const contacts = useSelector(selectors.selectContacts);\n  const filter = useSelector(selectors.selectFilter);\n  const error = useSelector(selectors.selectError);\n  const isLoading = useSelector(selectors.selectIsLoading);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const makeFilteredContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  return (\n    <>\n      {isLoading && <Title title={'Loading'} />}\n\n      {contacts.length === 0 && !error && !isLoading && (\n        <Title title=\"U haven't any friends\" />\n      )}\n      {contacts.length !== 0 && <Filter />}\n\n      {contacts.length !== 0 && filter === '' && (\n        <ContactsList contacts={contacts} />\n      )}\n\n      {filter !== '' && makeFilteredContacts().length !== 0 && (\n        <ContactsList contacts={makeFilteredContacts()} />\n      )}\n\n      {filter !== '' && makeFilteredContacts().length === 0 && (\n        <Title title=\"No matches\" />\n      )}\n\n      {error && <Title title={error} />}\n    </>\n  );\n}\n\nexport default Contacts;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { fetchContacts } from 'redux/operations';\nimport { selectIsLoading } from 'redux/selectors';\nimport ContactForm from 'components/ContactForm';\nimport Contacts from 'components/Contacts';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your tasks</title>\n      </Helmet>\n      <>{isLoading && 'Request in progress...'}</>\n\n      <>\n        <h1>Phonebook</h1>\n        <br />\n        <ContactForm />\n        <br />\n        <Contacts />\n      </>\n    </>\n  );\n}\n\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","useState","number","setNumber","name","setName","dispatch","useDispatch","useSelector","selectors","handleChange","target","value","resetForm","newContact","phone","trimmedName","trim","trimmedPhone","some","contact","alert","addContact","onSubmit","e","preventDefault","type","pattern","title","onChange","required","Tiltle","map","onClick","deleteContact","handleClick","length","event","handleFilterChange","useEffect","fetchContacts","makeFilteredContacts","toLowerCase","includes","Tasks","Helmet"],"sourceRoot":""}